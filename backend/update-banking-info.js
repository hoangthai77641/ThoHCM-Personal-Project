// Script c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th·∫≠t v√†o database
const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const { PlatformFee } = require('./models/Wallet');

async function updateBankingInfo() {
  try {
    // K·∫øt n·ªëi MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/thohcm';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connected to MongoDB');

    // T√¨m ho·∫∑c t·∫°o m·ªõi PlatformFee config
    let platformFee = await PlatformFee.findOne();
    if (!platformFee) {
      platformFee = new PlatformFee();
      console.log('üìÑ Creating new PlatformFee configuration');
    } else {
      console.log('üìÑ Updating existing PlatformFee configuration');
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th·∫≠t
    platformFee.bankAccount = {
      bankName: 'Vietcombank',
      bankCode: '970436',
      accountNumber: '0441000765886',
      accountName: 'NGUYEN HOANG THAI'
    };

    // C·∫≠p nh·∫≠t c·∫•u h√¨nh ph√≠ v√† gi·ªõi h·∫°n n·∫°p ti·ªÅn
    platformFee.feePercentage = 20; // 20% ph√≠ platform
    platformFee.minTopup = 50000;   // T·ªëi thi·ªÉu 50k
    platformFee.maxTopup = 2000000; // T·ªëi ƒëa 2M

    await platformFee.save();
    console.log('‚úÖ Banking information updated successfully!');
    
    console.log('');
    console.log('üè¶ New Banking Configuration:');
    console.log('  Bank:', platformFee.bankAccount.bankName);
    console.log('  Account:', platformFee.bankAccount.accountNumber);
    console.log('  Name:', platformFee.bankAccount.accountName);
    console.log('  Code:', platformFee.bankAccount.bankCode);
    console.log('');
    console.log('üí∞ Fee Configuration:');
    console.log('  Platform Fee:', platformFee.feePercentage + '%');
    console.log('  Min Topup:', platformFee.minTopup.toLocaleString('vi-VN') + ' VNƒê');
    console.log('  Max Topup:', platformFee.maxTopup.toLocaleString('vi-VN') + ' VNƒê');
    console.log('');
    console.log('üéâ System ready to accept real payments!');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    mongoose.connection.close();
    console.log('üì§ Database connection closed');
  }
}

// Ch·∫°y script
updateBankingInfo();