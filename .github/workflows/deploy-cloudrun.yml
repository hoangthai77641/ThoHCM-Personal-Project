name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'config/cloudbuild.yaml'
      - '.github/workflows/deploy-cloudrun.yml'
  workflow_dispatch:

env:
  PROJECT_ID: thohcm-application-475603
  SERVICE_NAME: thohcm-backend
  REGION: asia-southeast1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Authentication
      run: |
        echo "Current authenticated account:"
        gcloud auth list
        echo "Current project:"
        gcloud config get-value project

    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker

    - name: Build and Deploy to Cloud Run
      run: |
        echo "Starting Cloud Build..."
        gcloud builds submit --config=config/cloudbuild.yaml --timeout=20m \
          --substitutions _MONGODB_URI="${{ secrets.MONGODB_URI }}",_JWT_SECRET="${{ secrets.JWT_SECRET }}"
        
    - name: Get Service URL
      id: get-url
      run: |
        URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "Backend deployed to: $URL"

    - name: Check Service Status
      run: |
        echo "Checking service status..."
        gcloud run services describe $SERVICE_NAME --region=$REGION --format="table(status.conditions[].type,status.conditions[].status,status.conditions[].reason)"
        
    - name: Get Recent Logs
      run: |
        echo "Getting recent logs..."
        gcloud logs read "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE_NAME" --limit=50 --format="table(timestamp,severity,textPayload)" --region=$REGION || true

    - name: Verify Deployment
      run: |
        echo "Testing health endpoint..."
        sleep 30  # Wait for service to be ready
        curl -f ${{ steps.get-url.outputs.url }}/api/health || exit 1
        echo "âœ… Backend is healthy!"